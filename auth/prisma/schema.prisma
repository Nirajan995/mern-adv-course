// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  accounts       Account[]
  sessions       Session[]
  Blog           Blog[]
  // Comment        Comment[]
  Like           Like[]
  // CommentReplies CommentReplies[]
  Comment        Comment[]
  CommentReplies CommentReplies[]
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Blog {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String    @unique
  name       String
  content    String
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @db.ObjectId
  Like       Like[]    @relation("BlogLike")
  Comment    Comment[]
}

model Comment {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  body           String
  blogId         String           @db.ObjectId
  blog           Blog             @relation(fields: [blogId], references: [id])
  user           User?            @relation(fields: [userId], references: [id])
  userId         String?          @db.ObjectId
  Like           Like[]           @relation("CommentLike")
  CommentReplies CommentReplies[]
}

model Like {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  blog   Blog   @relation("BlogLike", fields: [blogId], references: [id])
  blogId String @db.ObjectId

  comment   Comment? @relation("CommentLike", fields: [commentId], references: [id])
  commentId String?  @db.ObjectId

  commentReplies   CommentReplies? @relation(fields: [commentRepliesId], references: [id])
  commentRepliesId String?         @db.ObjectId
}

model CommentReplies {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  user      User?   @relation(fields: [userId], references: [id])
  userId    String? @db.ObjectId
  commentId String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id])
  Like      Like[]
}
